version: '3.8'

services:
  # Main SI Prediction API
  si-prediction-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: si-prediction-api
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - LOG_LEVEL=INFO
      - MODEL_VERSION=1.0.0
    volumes:
      - ../logs:/app/logs
      - prediction_data:/app/data/predictions
    restart: unless-stopped
    networks:
      - si-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: si-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - si-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    container_name: si-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=si_prediction
      - POSTGRES_USER=si_user
      - POSTGRES_PASSWORD=si_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - si-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U si_user -d si_prediction"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: si-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - si-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: si-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - si-network
    depends_on:
      - prometheus

  # Nginx for load balancing and SSL termination
  nginx:
    image: nginx:alpine
    container_name: si-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    networks:
      - si-network
    depends_on:
      - si-prediction-api

  # Model retraining service (optional)
  model-retrainer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.retrainer
    container_name: si-model-retrainer
    environment:
      - SCHEDULE_CRON=0 2 * * 0  # Weekly at 2 AM Sunday
      - POSTGRES_URL=postgresql://si_user:si_password_2024@postgres:5432/si_prediction
    volumes:
      - ../models:/app/models
      - ../data:/app/data
      - retrain_logs:/app/logs
    restart: unless-stopped
    networks:
      - si-network
    depends_on:
      - postgres
      - si-prediction-api

networks:
  si-network:
    driver: bridge

volumes:
  prediction_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  nginx_logs:
  retrain_logs: 